// 既定値を上書きするには、このファイル内にキー バインドを挿入しますauto[]
[
  {
    "key": "ctrl+alt+cmd+n",
    "command": "-welcome.showNewFileEntries"
  },
  {
    "key": "cmd+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "cmd+n",
    "command": "workbench.action.files.newUntitledFile"
  },
  {
    "key": "cmd+n",
    "command": "explorer.newFile",
    "when": "explorerViewletFocus"
  },
  {
    "key": "shift+cmd+n",
    "command": "-workbench.action.newWindow"
  },
  {
    "key": "shift+cmd+n",
    "command": "explorer.newFolder",
    "when": "explorerViewletFocus"
  },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.switchWindow"
  },
  {
    "key": "shift+alt+f",
    "command": "-search.action.restrictSearchToFolder",
    "when": "folderMatchWithResourceFocus && searchViewletVisible"
  },
  {
    "key": "shift+alt+f",
    "command": "-filesExplorer.findInFolder",
    "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
  },
  {
    "key": "shift+alt+f",
    "command": "-notebook.format",
    "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "shift+alt+f",
    "command": "-notebook.formatCell",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "shift+alt+f",
    "command": "-editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
  },
  {
    "key": "ctrl+cmd+f",
    "command": "-workbench.action.toggleFullScreen",
    "when": "!isIOS"
  },
  {
    "key": "shift+alt+f",
    "command": "-editor.action.formatDocument.none",
    "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
  },
  {
    "key": "ctrl+cmd+f",
    "command": "prettier.forceFormatDocument"
  },
  {
    "key": "ctrl+cmd+l",
    "command": "eslint.executeAutofix"
  },
  {
    "key": "ctrl+/",
    "command": "erb.toggleTags",
    "when": "editorTextFocus && editorLangId == 'erb'"
  },
  {
    "key": "ctrl+shift+`",
    "command": "-erb.toggleTags",
    "when": "editorTextFocus && editorLangId == 'erb'"
  },
  {
    "key": "cmd+p",
    "command": "markdown.showPreview",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "cmd+ctrl+f",
    "command": "editor.action.formatDocument",
    "when": "editorLangId == 'ruby'"
  },
  {
    "key": "shift+cmd+v",
    "command": "-markdown.showPreview",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "cmd+r cmd+r",
    "command": "extension.runLineOnRspec",
    "when": "editorLangId == 'ruby'"
  },
  {
    "key": "cmd+l",
    "command": "-extension.runLineOnRspec",
    "when": "editorLangId == 'ruby'"
  },
  {
    "key": "shift+cmd+t",
    "command": "extension.runOpenSpec",
    "when": "editorLangId == 'ruby'"
  },
  {
    "key": "alt+cmd+o",
    "command": "-extension.runOpenSpec",
    "when": "editorLangId == 'ruby'"
  },
  {
    "key": "cmd+r cmd+f",
    "command": "extension.runFileOnRspec",
    "when": "editorLangId == 'ruby'"
  },
  {
    "key": "alt+cmd+l",
    "command": "-extension.runFileOnRspec",
    "when": "editorLangId == 'ruby'"
  },
  {
    "key": "cmd+r cmd+a",
    "command": "extension.runAllFilesOnRspec"
  },
  {
    "key": "cmd+r cmd+m",
    "command": "workbench.action.tasks.runTask",
    "args": "Run RSpec(Model Spec)"
  },
  {
    "key": "cmd+r cmd+e",
    "command": "workbench.action.tasks.runTask",
    "args": "Run RSpec(Failed)"
  },
  {
    "key": "cmd+r cmd+g",
    "command": "workbench.action.tasks.runTask",
    "args": "Run RSpec(GraphQL Spec)"
  },
  {
    "key": "cmd+r cmd+s",
    "command": "workbench.action.tasks.runTask",
    "args": "Run RSpec(System Spec)"
  },
  {
    "key": "shift+cmd+.",
    "command": "workbench.action.terminal.showQuickFixes",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+.",
    "command": "-workbench.action.terminal.showQuickFixes",
    "when": "terminalFocus"
  },
  {
    "key": "shift+cmd+o",
    "command": "git.openFile",
    "when": "config.git.enabled && isInDiffEditor && !git.missing && gitOpenRepositoryCount != '0' && resourceScheme =~ /^git$|^file$/"
  },
  {
    "key": "cmd+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "cmd+j",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && isWeb"
  },
  {
    "key": "cmd+f12",
    "command": "-editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && isWeb"
  },
  {
    "key": "cmd+j",
    "command": "editor.action.goToImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus"
  },
  {
    "key": "cmd+f12",
    "command": "-editor.action.goToImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus"
  },
  {
    "key": "shift+cmd+k",
    "command": "aipopup.action.modal.generate",
    "when": "editorFocus && !composerBarIsVisible && !composerControlPanelIsVisible"
  },
  {
    "key": "shift+cmd+k",
    "command": "-aipopup.action.modal.generate",
    "when": "editorFocus && !composerBarIsVisible && !composerControlPanelIsVisible"
  },
  {
    "key": "cmd+backspace",
    "command": "editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "shift+cmd+k",
    "command": "-editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "shift+cmd+y",
    "command": "-aichat.insertselectionintofollowup"
  },
  {
    "key": "shift+cmd+t",
    "command": "-workbench.action.reopenClosedEditor"
  }
]